#include <iostream>
#include <unistd.h>

#include <cxxtest/TestSuite.h>

#include <SerialBuffer.h>
#include <Logger.h>
#include <Parser.h>
#include <Dispatcher.h>
#include <OutputCapture.h>

using namespace std;

extern ostream& operator<<(ostream& os, const Logger& log);

class SerialBufferTestSuite: public CxxTest::TestSuite
{
  Logger log;
  SerialBuffer s;
  Dispatcher dispatch;
  OutputCapture cap;
public:
  SerialBufferTestSuite(void): s(log) {}
  void setUp()
  {
    s.flush();
    log.clear();
    dispatch.clear();
    dispatch.add(&s);
    cap.clear();
  }

  void testEmpty( void )
  {
    TS_ASSERT_EQUALS( log.size(), 0U );
  }
  void testOutput( void )
  {
    s.put("test");

    TS_ASSERT_EQUALS( log.size(), 1U );
    TS_ASSERT( log.at(0).find("test") != string::npos );
  }
  void testChars( void )
  {
    s.put('t');
    s.put('e');
    s.put('s');
    s.put('t');
    s.put('\n');

    TS_ASSERT_EQUALS( log.size(), 1U );
    TS_ASSERT( log.at(0).find("test") != string::npos );
  }
  void testNoCR( void )
  {
    s.put('t');
    s.put('e');
    s.put('s');
    s.put('t');

    TS_ASSERT_EQUALS( log.size(), 0U );
  }
  void testNonPrintable( void )
  {
    s.put(1);
    s.put('\n');

    TS_ASSERT( log.at(0).find("0x1") != string::npos );
  }
  void testAutoLog( void )
  {
    s.put('A');
    usleep(2000000L);
    s.put('B');
    s.put('C');
    s.put('D');
    s.put('\n');

    TS_ASSERT( log.at(1).find("A") == string::npos );
    TS_ASSERT( log.at(1).find("B") != string::npos );
  }
  void testAvailable( void )
  {
    TS_ASSERT_EQUALS( s.available(), false );
  }
  void testSetInputBuffer( void )
  {
    s.setInput(string("hi"));

    TS_ASSERT_EQUALS( s.available(), true );
    TS_ASSERT_EQUALS( s.get(), 'h' );
    TS_ASSERT_EQUALS( s.get(), 'i' );
    TS_ASSERT_EQUALS( s.available(), false );
  }
  void testSendCommandNew( void )
  {
    bool ok = dispatch.execute_new(Parser("send hi"));

    TS_ASSERT( log.at(0).find("send hi") != std::string::npos );
    TS_ASSERT_EQUALS( ok, true );
    TS_ASSERT_EQUALS( s.available(), true );
    TS_ASSERT_EQUALS( s.get(), 'h' );
    TS_ASSERT_EQUALS( s.get(), 'i' );
    TS_ASSERT_EQUALS( s.available(), false );
  }
  void testSendLongStringNew( void )
  {
    dispatch.execute_new(Parser("send this is a test of a really long test string, isn't it??"));

    ostringstream result;
    while ( s.available() )
      result << s.get();

    TS_ASSERT_EQUALS( result.str(), "this is a test of a really long test string, isn't it??" );
  }
  void testSendCommandWCRNew( void )
  {
    dispatch.execute_new(Parser("send hi cr"));

    TS_ASSERT( log.at(0).find("CR") != std::string::npos );
    TS_ASSERT_EQUALS( s.get(), 'h' );
    TS_ASSERT_EQUALS( s.get(), 'i' );
    TS_ASSERT_EQUALS( s.get(), '\n' );
    TS_ASSERT_EQUALS( s.available(), false );
  }
  void testSendHexCommand( void )
  {
    dispatch.execute_new(Parser("send-hex 1 d fe"));

    TS_ASSERT( log.at(0).find("3 chars") != std::string::npos );
    TS_ASSERT_EQUALS( s.get(), 1 );
    TS_ASSERT_EQUALS( s.get(), 0xd );
    TS_ASSERT_EQUALS( s.get(), '\xFE' );
    TS_ASSERT_EQUALS( s.available(), false );
  }
  void testSendExceptions_New(void)
  {
    TS_ASSERT_THROWS_ANYTHING( dispatch.execute_new(Parser("send")) );
    TS_ASSERT_THROWS_ANYTHING( dispatch.execute_new(Parser("send-hex")) );
  }
  void testCommandHelp( void )
  {
    cap.start();
    bool ok = dispatch.execute("help");
    cap.stop();

    TS_ASSERT_EQUALS( ok, true );
    TS_ASSERT_EQUALS( (bool)cap.contains("send"), true );
  }
  void testPeek( void )
  {
    s.setInput("test");

    TS_ASSERT_EQUALS( s.peek(), 't' );
    TS_ASSERT_EQUALS( s.get(), 't' );
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
