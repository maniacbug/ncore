CXXTEST_DIR = $(HOME)/Source/cxxtest ;
CORE_DIR  = .. ;
INTERNAL_DIR  = $(CORE_DIR)/internal ;
EXTRAS_DIR    = $(CORE_DIR)/extras ;

HDRS      += $(CXXTEST_DIR) $(PWD) $(INTERNAL_DIR) $(CORE_DIR) ;
DEFINES   += NATIVE=1 ;

CORE_MODULES          = [ GLOB $(CORE_DIR) : *.cpp ] ;
INTERNAL_MODULES      = [ GLOB $(INTERNAL_DIR) : *.cpp ] ;
TEST_MODULES          = [ GLOB $(PWD) : *Test.test ] ;
MOCK_MODULES          = $(EXTRAS_DIR)/readline.cpp $(EXTRAS_DIR)/mock_time.cpp ;
SKETCH_MODULES        = $(EXTRAS_DIR)/IfBlink.cpp ;
LOGGER_MODULES        = $(INTERNAL_DIR)/Logger.cpp $(INTERNAL_DIR)/Parser.cpp $(INTERNAL_DIR)/Dispatcher.cpp $(INTERNAL_DIR)/Clock.cpp ;
SKETCHTHREAD_MODULES  = $(INTERNAL_DIR)/SketchThread.cpp $(EXTRAS_DIR)/setuploop.cpp ;

CXXTEST_GEN = $(CXXTEST_DIR)/bin/cxxtestgen --error-printer ;
LINK    = c++ ;
C++   = c++ ;
LOCATE_TARGET = out ;
LOCATE_SOURCE = out ;
CCFLAGS   = -fprofile-arcs -ftest-coverage -g -O0 -fno-inline -Wall -Wextra ;
C++FLAGS  = $(CCFLAGS) ;
LINKFLAGS = -fprofile-arcs ;

if ( $(OS) = MACOSX )
{
  HDRS    += /Developer/SDKs/MacOSX10.6.sdk/usr/include ;
  DEFINES   += MAC=1 ;
  CXXTEST_GEN = $(CXXTEST_DIR)/python/scripts/cxxtestgen ;
  LINKFLAGS += -lpthread ;
}
else
{
  LINKFLAGS += -Wl,--no-as-needed -lpthread ;
  LINKFLAGS += -lrt ;
  C++FLAGS  += -std=c++0x ;
}

rule TestSuite
{
  Depends $(<) : $(>) ;
  MakeLocate $(<) : $(LOCATE_SOURCE) ;
  Clean clean : $(<) ;
}

actions TestSuite
{
  $(CXXTEST_GEN) --part $(>) > $(<)
}

rule TestRoot
{
  MakeLocate $(<) : $(LOCATE_SOURCE) ;
}

actions TestRoot
{
  $(CXXTEST_GEN) --root --error-printer > $(<)
}

rule C++TestSuite
{
  local _CPP = $(>:B).cpp ;
  TestSuite $(_CPP) : $(>) ;
  C++ $(<) : $(_CPP) ;
}

rule RunTest
{
  Depends $(<) : $(>) ;
  Clean clean : $(<) ;
  MakeLocate $(<) : $(LOCATE_TARGET) ;
  Depends all : $(<) ;
}

actions RunTest
{
  $(RM) $(LOCATE_TARGET)/*.gcda
  $(>) | tee $(<)
}

rule Coverage
{
  Depends $(<) : $(>) ;
  Depends $(<) : result ;
  MakeLocate $(<) : $(LOCATE_TARGET) ;
  Clean clean : $(<) ;
  Clean clean : $(2:D=).gcov ;
}

actions ignore Coverage
{
  gcov $(>) -o $(LOCATE_TARGET)/ > $(<)
  $(MV) *.gcov $(LOCATE_TARGET)/
  grep "###" $(LOCATE_TARGET)/$(INTERNAL_MODULES:D=).gcov
}
rule Pde
{
  Depends $(<) : $(>) ;
  MakeLocate $(<) : $(LOCATE_SOURCE) ;
  Clean clean : $(<) ;
}

actions Pde
{
  echo "#include <Arduino.h>" > $(<)
  echo "#line 1 \"$(>)\"" >> $(<)
  cat $(>) >> $(<)
}

rule C++Pde
{
  local _CPP = $(>:B).cpp ;
  Pde $(_CPP) : $(>) ;
  C++ $(<) : $(_CPP) ;
}

rule UserObject
{
  switch $(>:S)
  {
    case .pde : C++Pde $(<) : $(>) ;
    case .test : C++TestSuite $(<) : $(>) ;
  }
}
rule Objects
{
  local _i ;

  for _i in [ FGristFiles $(<) ]
  {
    Object $(_i:B)$(SUFOBJ) : $(_i) ;
    Depends obj : $(_i:B)$(SUFOBJ) ;
  }
}
rule Main
{
  MainFromObjects $(<) : $(>:B)$(SUFOBJ) ;
  Objects $(>) ;
}

TestRoot runner.cpp ;
Main Tests : runner.cpp $(INTERNAL_MODULES) $(MOCK_MODULES) $(TEST_MODULES) ;
LINKFLAGS on Tests = $(LINKFLAGS) -lreadline -lpthread ;
RunTest result : Tests ;
Coverage coverage : $(INTERNAL_MODULES) ;

#Main Shell : $(EXTRAS_DIR)/shellmain.cpp $(INTERNAL_MODULES) $(CORE_MODULES) $(SKETCH_MODULES) ;
#LINKFLAGS on Shell = $(LINKFLAGS) -lreadline -lpthread ;

TestSuite clock.cpp : ClockTest.test ;
Main clock : clock.cpp runner.cpp $(INTERNAL_DIR)/Clock.cpp $(EXTRAS_DIR)/mock_time.cpp ;
RunTest run_clock : clock ;

TestSuite commands.cpp : CommandsTest.test ;
Main commands : commands.cpp runner.cpp $(INTERNAL_DIR)/Dispatcher.cpp $(INTERNAL_DIR)/Parser.cpp ;
RunTest run_commands : commands ;

TestSuite eeprom.cpp : EepromTest.test ;
Main eeprom : eeprom.cpp runner.cpp $(INTERNAL_DIR)/EepromInternal.cpp $(LOGGER_MODULES) ;
RunTest run_eeprom : eeprom ;

TestSuite logger.cpp : LoggerTest.test ;
Main logger : logger.cpp runner.cpp $(LOGGER_MODULES) ;
RunTest run_logger : logger ;

TestSuite parser.cpp : ParserTest.test ;
Main parser : parser.cpp runner.cpp $(INTERNAL_DIR)/Parser.cpp ;
RunTest run_parser : parser ;

TestSuite pins.cpp : PinsTest.test ;
Main pins : pins.cpp runner.cpp $(INTERNAL_DIR)/Pins.cpp $(LOGGER_MODULES) ;
RunTest run_pins : pins ;

TestSuite queue_ts.cpp : QueueTSTest.test ;
Main queue_ts : queue_ts.cpp runner.cpp $(SKETCHTHREAD_MODULES) $(INTERNAL_DIR)/Clock.cpp ;
RunTest run_queue_ts : queue_ts ;

TestSuite scheduler.cpp : SchedulerTest.test ;
Main scheduler : scheduler.cpp runner.cpp $(INTERNAL_DIR)/Scheduler.cpp $(LOGGER_MODULES) $(SKETCHTHREAD_MODULES) $(EXTRAS_DIR)/mock_time.cpp $(CORE_DIR)/test/globals.cpp ;
RunTest run_scheduler : scheduler ;

TestSuite serial_buffer.cpp : SerialBufferTest.test ;
Main serial_buffer : serial_buffer.cpp runner.cpp $(INTERNAL_DIR)/SerialBuffer.cpp $(LOGGER_MODULES) ;
RunTest run_serial_buffer : serial_buffer ;

TestSuite shell_suite.cpp : ShellTest.test ;
Main shell_suite : shell_suite.cpp runner.cpp $(INTERNAL_DIR)/Shell.cpp $(INTERNAL_DIR)/Pins.cpp $(EXTRAS_DIR)/readline.cpp $(LOGGER_MODULES) ;
RunTest run_shell_suite : shell_suite ;

TestSuite sketch_thread.cpp : SketchThreadTest.test ;
Main sketch_thread : sketch_thread.cpp runner.cpp $(INTERNAL_DIR)/SketchThread.cpp $(INTERNAL_DIR)/Clock.cpp $(INTERNAL_DIR)/Logger.cpp ;
RunTest run_sketch_thread : sketch_thread ;

TestSuite spi_queue.cpp : SpiQueueTest.test ;
Main spi_queue : spi_queue.cpp runner.cpp $(INTERNAL_DIR)/SpiQueue.cpp $(SKETCHTHREAD_MODULES) $(LOGGER_MODULES) $(CORE_DIR)/test/globals.cpp ;
RunTest run_spi_queue : spi_queue ;

TestSuite wire_queue.cpp : WireQueueTest.test ;
Main wire_queue : wire_queue.cpp runner.cpp $(INTERNAL_DIR)/WireQueue.cpp $(INTERNAL_DIR)/Logger.cpp $(INTERNAL_DIR)/Clock.cpp ;
RunTest run_wire_queue : wire_queue ;
